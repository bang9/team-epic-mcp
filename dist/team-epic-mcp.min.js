#!/usr/bin/env node
import{Server as N}from"@modelcontextprotocol/sdk/server/index.js";import{StdioServerTransport as H}from"@modelcontextprotocol/sdk/server/stdio.js";import{ListToolsRequestSchema as j,CallToolRequestSchema as q}from"@modelcontextprotocol/sdk/types.js";import{google as D}from"googleapis";var U={name:"team-epic-mcp",version:"1.2.8",description:"MCP server for team project visibility using Google Sheets",type:"module",main:"dist/team-epic-mcp.js",bin:{"team-epic-mcp":"dist/team-epic-mcp.min.js"},scripts:{dev:"tsx src/index.ts",build:"esbuild src/index.ts --bundle --outfile=dist/team-epic-mcp.min.js --platform=node --target=node18 --format=esm --packages=external --minify --banner:js='#!/usr/bin/env node'",typecheck:"tsc --noEmit",lint:"eslint src/**/*.ts"},keywords:["mcp","team","project","google-sheets"],author:"",license:"MIT",dependencies:{"@modelcontextprotocol/sdk":"^0.5.0",googleapis:"^134.0.0"},devDependencies:{"@types/node":"^20.11.19","@typescript-eslint/eslint-plugin":"^6.21.0","@typescript-eslint/parser":"^6.21.0",esbuild:"^0.25.5",eslint:"^8.56.0",tsx:"^4.7.1",typescript:"^5.3.3"}};var c={SPREADSHEET_ID:process.env.SPREADSHEET_ID||(()=>{throw new Error("SPREADSHEET_ID environment variable is required")})(),GOOGLE_SERVICE_ACCOUNT_BASE64:process.env.GOOGLE_SERVICE_ACCOUNT_BASE64,SHEET_NAMES:{EPICS:"Epics",EPIC_STATUS:"Epic_Status",STATUS_UPDATES:"Status_Updates",METADATA:"Metadata"},CACHE_DURATION:parseInt(process.env.CACHE_DURATION||"60000"),SHEETS_API:{BASE_URL:"https://sheets.googleapis.com/v4/spreadsheets"}},b=U.version;function f(){let a=new Date,e=a.getFullYear(),t=Math.ceil((a.getMonth()+1)/3);return`${e}_Q${t}`}function v(a){let e=new Date(a),t=e.getFullYear(),s=Math.ceil((e.getMonth()+1)/3);return`${t}_Q${s}`}function g(a){return`Status_Updates_${a||f()}`}var y=class a{static{this.sheetVersionCache=null}static{this.migrationComplete=!1}static get isMigrationComplete(){return a.migrationComplete}constructor(e){this.sheetsClient=e}async checkAndMigrateIfNeeded(){if(a.migrationComplete)return;let e=b,t=await this.getSchemaVersion();this.needsMigration(t,e)&&(console.error(`Schema migration started: ${t} -> ${e}`),await this.executeMigration(t,e),await this.updateSchemaVersion(e),a.migrationComplete=!0,console.error(`Migration completed: ${t} -> ${e}`))}needsMigration(e,t){if(e===t)return!1;let s=n=>{let o=n.split(".").map(Number);return{major:o[0]||0,minor:o[1]||0,patch:o[2]||0}},r=s(e),i=s(t);return r.major!==i.major||r.minor!==i.minor}async getSchemaVersion(){if(a.sheetVersionCache)return a.sheetVersionCache;try{let s=(await this.sheetsClient.fetchSheet(c.SHEET_NAMES.METADATA)).find(r=>r.key==="schema_version")?.value||"1.0.2";return a.sheetVersionCache=s,s}catch(e){console.error("Failed to fetch Metadata sheet:",e),console.error("Metadata sheet does not exist. Creating it now...");try{await this.createMetadataSheet();let t="1.0.2";return a.sheetVersionCache=t,console.error(`Metadata sheet created successfully with initial schema version: ${t}`),t}catch(t){console.error("Failed to create Metadata sheet:",t),console.error("CreateError details:",JSON.stringify(t,null,2));let s="1.0.2";return a.sheetVersionCache=s,console.error(`Falling back to version ${s} to continue migration`),s}}}async createMetadataSheet(){try{console.error(`Creating _Metadata sheet: ${c.SHEET_NAMES.METADATA}`);let e=await this.sheetsClient.createSheet(c.SHEET_NAMES.METADATA);console.error(`Sheet creation result: ${e}`);let t=[["key","value","updated_at"],["schema_version","1.0.2",new Date().toISOString()],["created_at",new Date().toISOString().split("T")[0],new Date().toISOString()],["last_migration","none",new Date().toISOString()]];console.error("Adding initial data to _Metadata sheet..."),await this.sheetsClient.updateValues(`${c.SHEET_NAMES.METADATA}!A1:C4`,t),console.error("_Metadata sheet created and initialized successfully")}catch(e){throw console.error("Failed to create _Metadata sheet:",e),console.error("Error details:",JSON.stringify(e,null,2)),e}}async updateSchemaVersion(e){await this.upsertMetadata("schema_version",e),a.sheetVersionCache=e}async upsertMetadata(e,t){try{let r=(await this.sheetsClient.fetchSheet(c.SHEET_NAMES.METADATA)).findIndex(n=>n.key===e),i=[e,t,new Date().toISOString()];if(r>=0){let n=`${c.SHEET_NAMES.METADATA}!A${r+2}:C${r+2}`;await this.sheetsClient.updateValues(n,[i])}else await this.sheetsClient.appendValues(`${c.SHEET_NAMES.METADATA}!A:C`,[i])}catch(s){throw console.error(`Failed to upsert metadata ${e}:`,s),s}}async executeMigration(e,t){let s=n=>{let o=n.split(".").map(Number);return{major:o[0]||0,minor:o[1]||0,patch:o[2]||0}},r=s(e),i=s(t);r.major===1&&r.minor===0&&i.major===1&&i.minor>=1&&await this.migrate_1_0_2_to_1_1_0(),console.error(`Schema migration completed from ${e} to ${t}`)}async migrate_1_0_2_to_1_1_0(){console.error("Starting 1.0.2 -> 1.1.0 migration...");try{console.error("1. Adding created_quarter column to Epics sheet..."),await this.addCreatedQuarterColumn(),console.error("2. Assigning quarters to existing epics...");let e=await this.sheetsClient.fetchSheetData(c.SHEET_NAMES.EPICS),t=await this.sheetsClient.fetchSheetData(c.SHEET_NAMES.STATUS_UPDATES),s=new Map;for(let n of e){let o=this.estimateCreationQuarter(n,t);s.set(n.epic_id,o),await this.updateEpicQuarter(n.epic_id,o)}console.error("3. Creating quarterly Status_Updates sheets...");let r=[...new Set(s.values())],i=!0;for(let n of r){let o=g(n);await this.sheetsClient.sheetExists(o)?console.error(`Sheet already exists: ${o}`):(console.error(`Creating new sheet: ${o}`),await this.sheetsClient.createSheet(o),i=!1)}i?console.error("4. All quarterly sheets already exist - skipping data migration"):(console.error("4. Migrating Status_Updates data to quarterly sheets..."),await this.migrateStatusUpdates(t,s),console.error("5. Clearing legacy Status_Updates sheet..."),await this.clearStatusUpdatesSheet()),console.error("1.0.2 -> 1.1.0 migration completed successfully!")}catch(e){throw console.error("Migration failed:",e),e}}async addCreatedQuarterColumn(){try{await this.sheetsClient.updateValues(`${c.SHEET_NAMES.EPICS}!L1`,[["created_quarter"]])}catch(e){throw console.error("Failed to add created_quarter column:",e),e}}estimateCreationQuarter(e,t){if(e.start_date&&e.start_date.trim())try{return v(e.start_date)}catch{console.warn(`Invalid start_date for epic ${e.epic_id}: ${e.start_date}`)}let s=t.filter(r=>r.epic_id===e.epic_id).sort((r,i)=>new Date(r.timestamp).getTime()-new Date(i.timestamp).getTime());if(s.length>0)try{return v(s[0].timestamp)}catch{console.warn(`Invalid timestamp for epic ${e.epic_id}: ${s[0].timestamp}`)}return f()}async updateEpicQuarter(e,t){try{let r=(await this.sheetsClient.fetchSheetData(c.SHEET_NAMES.EPICS)).findIndex(i=>i.epic_id===e);if(r>=0){let i=`${c.SHEET_NAMES.EPICS}!L${r+2}`;await this.sheetsClient.updateValues(i,[[t]])}}catch(s){throw console.error(`Failed to update quarter for epic ${e}:`,s),s}}async migrateStatusUpdates(e,t){console.error(`Processing ${e.length} status updates for migration...`);let s=new Map;for(let r of e){let i=t.get(r.epic_id);i&&(s.has(i)||s.set(i,[]),s.get(i).push(r))}for(let[r,i]of s){let n=g(r);if(console.error(`Migrating ${i.length} updates to ${n}...`),await this.sheetsClient.updateValues(`${n}!A1:F1`,[["timestamp","epic_id","update_type","platform","message","author"]]),i.length>0){let p=[];for(let h=0;h<i.length;h+=1e3){let u=i.slice(h,h+1e3).map(d=>[d.timestamp,d.epic_id,d.update_type,d.platform||"",d.message,d.author]);p.push(u)}for(let h=0;h<p.length;h++)console.error(`Processing batch ${h+1}/${p.length} for ${n}...`),await this.sheetsClient.appendValues(`${n}!A:F`,p[h]),p.length>1&&await new Promise(E=>setTimeout(E,100))}}console.error("Status updates migration completed.")}async clearStatusUpdatesSheet(){try{await this.sheetsClient.updateValues(`${c.SHEET_NAMES.STATUS_UPDATES}!A2:Z`,[[]])}catch(e){throw console.error("Failed to clear Status_Updates sheet:",e),e}}};var w=class{constructor(){this.cache=null;this.cacheTimestamp=0;this.initializeAuth(),this.sheets=D.sheets({version:"v4",auth:this.auth}),this.versionManager=new y(this)}initializeAuth(){let e=c.GOOGLE_SERVICE_ACCOUNT_BASE64;if(!e)throw new Error("GOOGLE_SERVICE_ACCOUNT_BASE64 environment variable is required. Service Account authentication is mandatory.");try{let t=Buffer.from(e,"base64").toString("utf-8"),s=JSON.parse(t);this.auth=new D.auth.GoogleAuth({credentials:s,scopes:["https://www.googleapis.com/auth/spreadsheets"]}),console.error("Service Account authentication initialized successfully")}catch(t){throw console.error("Failed to initialize Service Account authentication:",t),new Error("Invalid GOOGLE_SERVICE_ACCOUNT_BASE64 environment variable. Please ensure it contains a valid base64-encoded Service Account JSON.")}}async fetchAllData(){let e=Date.now();if(this.cache&&e-this.cacheTimestamp<c.CACHE_DURATION)return this.cache;try{let s=(await this.sheets.spreadsheets.values.batchGet({spreadsheetId:c.SPREADSHEET_ID,ranges:[`${c.SHEET_NAMES.EPICS}!A:Z`,`${c.SHEET_NAMES.EPIC_STATUS}!A:Z`]})).data.valueRanges||[],r=this.parseSheetData(s[0]?.values||[]),i=this.parseSheetData(s[1]?.values||[]),n=r.filter(u=>u.current_status!=="done"&&u.current_status!=="released"),o=[...new Set(n.map(u=>u.created_quarter).filter(Boolean))],p=[],h=new Set;for(let u of o){let d=g(u);try{let l=await this.sheets.spreadsheets.values.get({spreadsheetId:c.SPREADSHEET_ID,range:`${d}!A:Z`}),m=this.parseSheetData(l.data.values||[]);p.push(...m),h.add(u)}catch(l){console.warn(`Could not fetch ${d}:`,l)}}let E=f();if(!h.has(E)){let u=g();try{let d=await this.sheets.spreadsheets.values.get({spreadsheetId:c.SPREADSHEET_ID,range:`${u}!A:Z`}),l=this.parseSheetData(d.data.values||[]);p.push(...l)}catch(d){console.warn(`Could not fetch current quarter ${u}:`,d)}}try{let u=await this.sheets.spreadsheets.values.get({spreadsheetId:c.SPREADSHEET_ID,range:`${c.SHEET_NAMES.STATUS_UPDATES}!A:Z`}),d=this.parseSheetData(u.data.values||[]);p.push(...d)}catch(u){console.warn("Could not fetch legacy Status_Updates:",u)}return this.cache={epics:r,epicStatuses:i,statusUpdates:p},this.cacheTimestamp=e,this.cache}catch(t){throw console.error("Failed to fetch sheets:",t),t}}parseSheetData(e){if(e.length===0)return[];let t=e[0];return e.slice(1).map(r=>{let i={};return t.forEach((n,o)=>{let p=r[o]||"";["ios_progress","android_progress","js_progress"].includes(n)?p=parseInt(p)||0:n==="is_carry_over"&&(p=p.toString().toLowerCase()==="true"),i[n]=p}),i})}async fetchSheet(e){try{let s=(await this.sheets.spreadsheets.values.get({spreadsheetId:c.SPREADSHEET_ID,range:`${e}!A:Z`})).data.values||[];return this.parseSheetData(s)}catch(t){if(console.error(`Failed to fetch ${e} sheet:`,t),t.message&&(t.message.includes("Unable to parse range")||t.message.includes("not found")||t.message.includes("does not exist")))throw t;return[]}}async updateValues(e,t){try{let s=await this.sheets.spreadsheets.values.update({spreadsheetId:c.SPREADSHEET_ID,range:e,valueInputOption:"USER_ENTERED",requestBody:{values:t}});return this.clearCache(),s.status===200}catch(s){console.error("Failed to update values:",s);let r="Failed to update values";throw s.errors&&s.errors[0]?r=s.errors[0].message:s.message&&(r=s.message),s.code===403?r="Permission denied. Please ensure the Service Account has edit access to the spreadsheet.":s.code===404?r="Spreadsheet or range not found. Please check the spreadsheet ID and range.":s.code===401&&(r="Authentication failed. Please check your Service Account credentials."),new Error(r)}}async appendValues(e,t){try{console.error("Attempting to append values to:",e),console.error("Values to append:",JSON.stringify(t));let s=await this.sheets.spreadsheets.values.append({spreadsheetId:c.SPREADSHEET_ID,range:e,valueInputOption:"USER_ENTERED",requestBody:{values:t}});return console.error("Response status:",s.status),console.error("Values appended successfully"),this.clearCache(),s.status===200}catch(s){console.error("Failed to append values:",s);let r="Failed to append values";throw s.errors&&s.errors[0]?r=s.errors[0].message:s.message&&(r=s.message),s.code===403?r="Permission denied. Please ensure the Service Account has edit access to the spreadsheet.":s.code===404?r="Spreadsheet or range not found. Please check the spreadsheet ID and range.":s.code===401&&(r="Authentication failed. Please check your Service Account credentials."),new Error(r)}}async updateEpicStatus(e,t){try{let s=await this.fetchAllData(),r=s.epicStatuses.findIndex(i=>i.epic_id===e);if(r===-1){let i=[e,t.ios_progress||0,t.android_progress||0,t.js_progress||0,t.overall_status||"",t.last_comment||"",new Date().toISOString(),t.updated_by||"System"];return await this.appendValues(`${c.SHEET_NAMES.EPIC_STATUS}!A:H`,[i])}else{let i=`${c.SHEET_NAMES.EPIC_STATUS}!A${r+2}:H${r+2}`,n=s.epicStatuses[r],o=[e,t.ios_progress??n.ios_progress,t.android_progress??n.android_progress,t.js_progress??n.js_progress,t.overall_status??n.overall_status,t.last_comment??n.last_comment,new Date().toISOString(),t.updated_by??n.updated_by];return await this.updateValues(i,[o])}}catch(s){return console.error("Error updating epic status:",s),!1}}async addStatusUpdate(e){try{let t=[new Date().toISOString(),e.epic_id,e.update_type,e.platform||"",e.message,e.author],s=await this.getTargetSheetForUpdate(e.epic_id);return await this.appendValues(`${s}!A:F`,[t])}catch(t){return console.error("Error adding status update:",t),!1}}async getTargetSheetForUpdate(e){try{let s=(await this.fetchSheetData(c.SHEET_NAMES.EPICS)).find(r=>r.epic_id===e);if(s&&s.created_quarter){let r=g(s.created_quarter);return await this.sheetExists(r)||(console.error(`Creating missing quarterly sheet: ${r}`),await this.createSheet(r),await this.updateValues(`${r}!A1:F1`,[["timestamp","epic_id","update_type","platform","message","author"]])),r}else return c.SHEET_NAMES.STATUS_UPDATES}catch(t){return console.error("Failed to determine target sheet for update:",t),c.SHEET_NAMES.STATUS_UPDATES}}async changeEpicStatus(e,t){try{let r=(await this.fetchAllData()).epics.findIndex(n=>n.epic_id===e);if(r===-1)return console.error(`Epic ${e} not found`),!1;let i=`${c.SHEET_NAMES.EPICS}!D${r+2}`;return await this.updateValues(i,[[t]])}catch(s){return console.error("Error changing epic status:",s),!1}}extractEpicIdFromUrl(e){let t=e.match(/\/browse\/([A-Z]+-\d+)$/);return t?t[1]:null}async createEpic(e){try{let t=this.extractEpicIdFromUrl(e.epic_url);if(!t)throw new Error("\uC62C\uBC14\uB978 Epic URL \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123");let s=e.epic_url,r=f(),i=[t,e.epic_name,s,e.initial_status||"backlog",e.ios_assignee,e.android_assignee,e.js_assignee,e.start_date,e.target_date,e.prd_link||"",e.tip_link||"",r];try{await this.appendValues(`${c.SHEET_NAMES.EPICS}!A:L`,[i])}catch(h){throw new Error(`Failed to add epic to Epics sheet: ${h.message}`)}let n=[t,0,0,0,e.initial_status||"backlog","Epic created",new Date().toISOString(),e.author];try{await this.appendValues(`${c.SHEET_NAMES.EPIC_STATUS}!A:H`,[n])}catch(h){throw new Error(`Failed to add epic to Epic_Status sheet: ${h.message}`)}let o={epic_id:t,update_type:"status_change",message:`Epic created: ${e.epic_name}`,author:e.author};return await this.addStatusUpdate(o)||console.error("Warning: Failed to add creation record to Status_Updates"),t}catch(t){throw t.message.includes("Permission denied")||t.message.includes("API key")?new Error("API key is missing or invalid. Please set GOOGLE_API_KEY environment variable."):t}}async fetchSheetData(e){return this.fetchSheet(e)}async fetchEpicHistory(e){try{let s=(await this.fetchSheetData(c.SHEET_NAMES.EPICS)).find(r=>r.epic_id===e);if(s&&s.created_quarter){let r=g(s.created_quarter);return(await this.fetchSheetData(r)).filter(n=>n.epic_id===e)}else return(await this.fetchSheetData(c.SHEET_NAMES.STATUS_UPDATES)).filter(i=>i.epic_id===e)}catch(t){return console.error(`Failed to fetch history for epic ${e}:`,t),[]}}async sheetExists(e){try{return((await this.sheets.spreadsheets.get({spreadsheetId:c.SPREADSHEET_ID})).data.sheets||[]).some(r=>r.properties?.title===e)}catch(t){return console.error(`Failed to check if sheet ${e} exists:`,t),!1}}async createSheet(e){try{let t=await this.sheets.spreadsheets.batchUpdate({spreadsheetId:c.SPREADSHEET_ID,requestBody:{requests:[{addSheet:{properties:{title:e}}}]}});return this.clearCache(),t.status===200}catch(t){if(console.error(`Failed to create sheet ${e}:`,t),t.message&&t.message.includes("already exists"))return!0;throw new Error(`Failed to create sheet ${e}: ${t.message}`)}}clearCache(){this.cache=null,this.cacheTimestamp=0}async checkAndMigrateIfNeeded(){return this.versionManager.checkAndMigrateIfNeeded()}};function O(a){return`\u{1F4CB} **${a.epic_name}** (${a.epic_id})
- \uC0C1\uD0DC: ${a.current_status}
- \uAE30\uAC04: ${a.start_date} ~ ${a.target_date}
- \uB2F4\uB2F9\uC790:
  - iOS: ${a.ios_assignee}
  - Android: ${a.android_assignee}
  - JS: ${a.js_assignee}
- [Epic Link](${a.epic_url})${a.prd_link?` | [PRD](${a.prd_link})`:""}${a.tip_link?` | [TIP](${a.tip_link})`:""}`}function A(a,e){let t=O(a);return e&&(t+=`

**\uD604\uC7AC \uC9C4\uD589 \uC0C1\uD669:**
- iOS: ${e.ios_progress}%
- Android: ${e.android_progress}%
- JS: ${e.js_progress}%
- \uC804\uCCB4 \uC0C1\uD0DC: ${e.overall_status}
- \uCD5C\uC2E0 \uCF54\uBA58\uD2B8: ${e.last_comment}
- \uC5C5\uB370\uC774\uD2B8: ${I(e.last_updated)} by ${e.updated_by}`),t}function $(a){let t={progress:"\u{1F4CA}",blocker:"\u{1F6AB}",resolved:"\u2705",comment:"\u{1F4AC}",status_change:"\u{1F504}"}[a.update_type]||"\u{1F4DD}",s=a.platform?`[${a.platform}] `:"";return`${t} **${I(a.timestamp)}** ${s}- ${a.message} (by ${a.author})`}function I(a){return new Date(a).toLocaleDateString("ko-KR",{month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"})}var T=[{name:"list_epics",description:"Epic \uBAA9\uB85D\uC744 \uC870\uD68C\uD569\uB2C8\uB2E4. \uC0C1\uD0DC\uC640 \uB2F4\uB2F9\uC790\uB85C \uD544\uD130\uB9C1 \uAC00\uB2A5\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{status:{type:"string",description:"Epic \uC0C1\uD0DC \uD544\uD130",enum:["backlog","kickoff","planning","development","code_review","testing","ready_to_release","released","done","on_hold"]},assignee:{type:"string",description:"\uB2F4\uB2F9\uC790 \uBA58\uC158 (\uC608: @Airen Kang)"}}},handler:(a,e)=>{let t=a.epics;e.status&&(t=t.filter(r=>r.current_status===e.status)),e.assignee&&(t=t.filter(r=>r.ios_assignee===e.assignee||r.android_assignee===e.assignee||r.js_assignee===e.assignee));let s=t.length>0?t.map(r=>{let i=a.epicStatuses.find(n=>n.epic_id===r.epic_id);return A(r,i)}).join(`

---

`):"\uC870\uAC74\uC5D0 \uB9DE\uB294 Epic\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.";return{content:[{type:"text",text:`# Epic \uBAA9\uB85D (${t.length}\uAC1C)

${s}`}]}}},{name:"get_epic_details",description:"\uD2B9\uC815 Epic\uC758 \uC0C1\uC138 \uC815\uBCF4\uC640 \uCD5C\uADFC \uC5C5\uB370\uC774\uD2B8\uB97C \uC870\uD68C\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_id:{type:"string",description:"Epic ID (\uC608: PROJ-123)"}},required:["epic_id"]},handler:(a,e)=>{let t=a.epics.find(n=>n.epic_id===e.epic_id);if(!t)return{content:[{type:"text",text:`Epic ID ${e.epic_id}\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.`}]};let s=a.epicStatuses.find(n=>n.epic_id===e.epic_id),r=a.statusUpdates.filter(n=>n.epic_id===e.epic_id).sort((n,o)=>new Date(o.timestamp).getTime()-new Date(n.timestamp).getTime()).slice(0,10),i=`# Epic \uC0C1\uC138 \uC815\uBCF4

${A(t,s)}

`;return r.length>0&&(i+=`## \u{1F4DC} \uCD5C\uADFC \uC5C5\uB370\uC774\uD2B8 (${r.length}\uAC1C)

`,i+=r.map($).join(`
`)),{content:[{type:"text",text:i}]}}},{name:"get_epic_timeline",description:"\uD2B9\uC815 Epic\uC758 \uC804\uCCB4 \uD0C0\uC784\uB77C\uC778\uC744 \uC870\uD68C\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_id:{type:"string",description:"Epic ID"},limit:{type:"number",description:"\uC870\uD68C\uD560 \uC5C5\uB370\uC774\uD2B8 \uC218 (\uAE30\uBCF8\uAC12: 50)",default:50}},required:["epic_id"]},handler:(a,e)=>{let t=a.epics.find(i=>i.epic_id===e.epic_id);if(!t)return{content:[{type:"text",text:`Epic ID ${e.epic_id}\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.`}]};let s=a.statusUpdates.filter(i=>i.epic_id===e.epic_id).sort((i,n)=>new Date(n.timestamp).getTime()-new Date(i.timestamp).getTime()).slice(0,e.limit||50),r=`# ${t.epic_name} \uD0C0\uC784\uB77C\uC778

`;return s.length>0?r+=s.map($).join(`
`):r+="\uC544\uC9C1 \uC5C5\uB370\uC774\uD2B8\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4.",{content:[{type:"text",text:r}]}}},{name:"get_team_progress",description:"\uD300 \uC804\uCCB4\uC758 Epic \uC9C4\uD589 \uC0C1\uD669\uC744 \uC694\uC57D\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{}},handler:(a,e)=>{let t=a.epics.filter(l=>!["backlog","done","released","on_hold"].includes(l.current_status)),s={};t.forEach(l=>{s[l.current_status]=(s[l.current_status]||0)+1});let r=0,i=0,n=0,o=0;t.forEach(l=>{let m=a.epicStatuses.find(S=>S.epic_id===l.epic_id);m&&(r+=m.ios_progress,i+=m.android_progress,n+=m.js_progress,o++)});let p=o>0?Math.round(r/o):0,h=o>0?Math.round(i/o):0,E=o>0?Math.round(n/o):0,u=a.statusUpdates.filter(l=>l.update_type==="blocker").filter(l=>!a.statusUpdates.find(S=>S.epic_id===l.epic_id&&S.update_type==="resolved"&&new Date(S.timestamp)>new Date(l.timestamp))),d=`# \u{1F3E2} \uD300 \uC9C4\uD589 \uD604\uD669

`;return d+=`## \u{1F4CA} Epic \uC0C1\uD0DC \uBD84\uD3EC
`,Object.entries(s).forEach(([l,m])=>{d+=`- ${l}: ${m}\uAC1C
`}),d+=`
## \u{1F3AF} \uD50C\uB7AB\uD3FC\uBCC4 \uD3C9\uADE0 \uC9C4\uD589\uB960
`,d+=`- iOS: ${p}%
`,d+=`- Android: ${h}%
`,d+=`- JS: ${E}%
`,u.length>0&&(d+=`
## \u{1F6AB} \uD604\uC7AC \uBE14\uB85C\uCEE4 (${u.length}\uAC1C)
`,u.slice(0,5).forEach(l=>{let m=a.epics.find(S=>S.epic_id===l.epic_id);d+=`- **${m?.epic_name||l.epic_id}**: ${l.message}
`})),{content:[{type:"text",text:d}]}}},{name:"find_blockers",description:"\uD574\uACB0\uB418\uC9C0 \uC54A\uC740 \uBE14\uB85C\uCEE4\uAC00 \uC788\uB294 Epic\uC744 \uCC3E\uC2B5\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{}},handler:(a,e)=>{let t={};a.statusUpdates.forEach(i=>{i.update_type==="blocker"&&(a.statusUpdates.find(o=>o.epic_id===i.epic_id&&o.update_type==="resolved"&&o.platform===i.platform&&new Date(o.timestamp)>new Date(i.timestamp))||(t[i.epic_id]||(t[i.epic_id]=[]),t[i.epic_id].push(i)))});let s=Object.keys(t);if(s.length===0)return{content:[{type:"text",text:"\uD604\uC7AC \uD574\uACB0\uB418\uC9C0 \uC54A\uC740 \uBE14\uB85C\uCEE4\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4. \u{1F389}"}]};let r=`# \u{1F6AB} \uBE14\uB85C\uCEE4\uAC00 \uC788\uB294 Epic (${s.length}\uAC1C)

`;return s.forEach(i=>{let n=a.epics.find(p=>p.epic_id===i),o=t[i];r+=`## ${n?.epic_name||i}
`,o.forEach(p=>{r+=$(p)+`
`}),r+=`
`}),{content:[{type:"text",text:r}]}}},{name:"search_by_assignee",description:"\uD2B9\uC815 \uB2F4\uB2F9\uC790\uAC00 \uD560\uB2F9\uB41C Epic\uC744 \uAC80\uC0C9\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{assignee:{type:"string",description:"\uB2F4\uB2F9\uC790 \uBA58\uC158 (\uC608: @Airen Kang)"},platform:{type:"string",description:"\uD50C\uB7AB\uD3FC \uD544\uD130",enum:["iOS","Android","JS"]}},required:["assignee"]},handler:(a,e)=>{let t=a.epics;if(e.platform)switch(e.platform){case"iOS":t=t.filter(n=>n.ios_assignee===e.assignee);break;case"Android":t=t.filter(n=>n.android_assignee===e.assignee);break;case"JS":t=t.filter(n=>n.js_assignee===e.assignee);break}else t=t.filter(n=>n.ios_assignee===e.assignee||n.android_assignee===e.assignee||n.js_assignee===e.assignee);let s=t.filter(n=>!["done","released"].includes(n.current_status)),r=t.filter(n=>["done","released"].includes(n.current_status)),i=`# ${e.assignee}\uB2D8\uC758 Epic

`;return s.length>0&&(i+=`## \u{1F504} \uC9C4\uD589\uC911 (${s.length}\uAC1C)

`,s.forEach(n=>{let o=a.epicStatuses.find(p=>p.epic_id===n.epic_id);i+=A(n,o)+`

`})),r.length>0&&(i+=`## \u2705 \uC644\uB8CC (${r.length}\uAC1C)

`,r.forEach(n=>{i+=`- ${n.epic_name} (${n.epic_id})
`})),t.length===0&&(i=`${e.assignee}\uB2D8\uC5D0\uAC8C \uD560\uB2F9\uB41C Epic\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.`),{content:[{type:"text",text:i}]}}}];var _=a=>{let e=a.match(/\/browse\/([A-Z]+-\d+)$/);return e?e[1]:null},x=a=>a.startsWith("@")&&a.length>1,M=a=>{if(!/^\d{4}-\d{2}-\d{2}$/.test(a))return!1;let t=new Date(a);return t instanceof Date&&!isNaN(t.getTime())},k=a=>_(a)!==null,C=[{name:"create_epic",description:"\uC0C8\uB85C\uC6B4 Epic\uC744 \uC0DD\uC131\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_name:{type:"string",description:"Epic \uC774\uB984"},ios_assignee:{type:"string",description:"iOS \uB2F4\uB2F9\uC790 (\uC608: @Airen Kang)"},android_assignee:{type:"string",description:"Android \uB2F4\uB2F9\uC790 (\uC608: @John Kim)"},js_assignee:{type:"string",description:"JS \uB2F4\uB2F9\uC790 (\uC608: @Sarah Lee)"},start_date:{type:"string",description:"\uC2DC\uC791\uC77C (YYYY-MM-DD \uD615\uC2DD)"},target_date:{type:"string",description:"\uBAA9\uD45C\uC77C (YYYY-MM-DD \uD615\uC2DD)"},epic_url:{type:"string",description:"Epic URL (\uC120\uD0DD\uC0AC\uD56D, \uC790\uB3D9 \uC0DD\uC131\uB428)"},prd_link:{type:"string",description:"PRD \uB9C1\uD06C (\uC120\uD0DD\uC0AC\uD56D)"},tip_link:{type:"string",description:"TIP \uB9C1\uD06C (\uC120\uD0DD\uC0AC\uD56D)"},initial_status:{type:"string",description:"\uCD08\uAE30 \uC0C1\uD0DC (\uC120\uD0DD\uC0AC\uD56D, \uAE30\uBCF8\uAC12: backlog)",enum:["backlog","kickoff","planning","development","code_review","testing","ready_to_release","released","done","on_hold"]},author:{type:"string",description:"\uC0DD\uC131\uC790"}},required:["epic_name","epic_url","ios_assignee","android_assignee","js_assignee","start_date","target_date","author"]},handler:async(a,e)=>{let t=[];if(k(e.epic_url)||t.push("Epic URL \uD615\uC2DD\uC774 \uC62C\uBC14\uB974\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123"),x(e.ios_assignee)||t.push("iOS \uB2F4\uB2F9\uC790\uB294 @\uB85C \uC2DC\uC791\uD574\uC57C \uD569\uB2C8\uB2E4"),x(e.android_assignee)||t.push("Android \uB2F4\uB2F9\uC790\uB294 @\uB85C \uC2DC\uC791\uD574\uC57C \uD569\uB2C8\uB2E4"),x(e.js_assignee)||t.push("JS \uB2F4\uB2F9\uC790\uB294 @\uB85C \uC2DC\uC791\uD574\uC57C \uD569\uB2C8\uB2E4"),M(e.start_date)||t.push("\uC2DC\uC791\uC77C\uC740 YYYY-MM-DD \uD615\uC2DD\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4"),M(e.target_date)||t.push("\uBAA9\uD45C\uC77C\uC740 YYYY-MM-DD \uD615\uC2DD\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4"),new Date(e.start_date)>new Date(e.target_date)&&t.push("\uC2DC\uC791\uC77C\uC740 \uBAA9\uD45C\uC77C\uBCF4\uB2E4 \uC774\uC804\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4"),e.epic_name.trim().length<3&&t.push("Epic \uC774\uB984\uC740 \uCD5C\uC18C 3\uC790 \uC774\uC0C1\uC774\uC5B4\uC57C \uD569\uB2C8\uB2E4"),t.length>0)return{content:[{type:"text",text:`\u274C \uC785\uB825 \uC624\uB958:
${t.map(s=>`- ${s}`).join(`
`)}`}]};try{return _(e.epic_url)?{content:[{type:"text",text:`\u2705 \uC0C8\uB85C\uC6B4 Epic\uC774 \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4!

**Epic ID**: ${await a.createEpic(e)}
**Epic \uC774\uB984**: ${e.epic_name}
**\uB2F4\uB2F9\uC790**:
- iOS: ${e.ios_assignee}
- Android: ${e.android_assignee}
- JS: ${e.js_assignee}
**\uAE30\uAC04**: ${e.start_date} ~ ${e.target_date}
**\uC0C1\uD0DC**: ${e.initial_status||"backlog"}

Epic\uC774 \uC131\uACF5\uC801\uC73C\uB85C \uC0DD\uC131\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uC2A4\uD504\uB808\uB4DC\uC2DC\uD2B8\uC5D0\uC11C \uD655\uC778\uD558\uC138\uC694.`}]}:{content:[{type:"text",text:`\u274C Epic URL\uC5D0\uC11C ID\uB97C \uCD94\uCD9C\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4: ${e.epic_url}`}]}}catch(s){console.error("Epic creation error:",s),console.error("Epic data:",e);let r="\uC54C \uC218 \uC5C6\uB294 \uC624\uB958";return s instanceof Error&&(r=s.message,s.message.includes("API key")?r+=`

API \uD0A4 \uC124\uC815\uC744 \uD655\uC778\uD574\uC8FC\uC138\uC694. MCP \uC11C\uBC84 \uD658\uACBD\uC5D0 GOOGLE_API_KEY\uAC00 \uC124\uC815\uB418\uC5B4 \uC788\uC5B4\uC57C \uD569\uB2C8\uB2E4.`:s.message.includes("Permission denied")?r+=`

\uC2A4\uD504\uB808\uB4DC\uC2DC\uD2B8 \uAD8C\uD55C\uC744 \uD655\uC778\uD574\uC8FC\uC138\uC694. API \uD0A4\uAC00 \uD574\uB2F9 \uC2A4\uD504\uB808\uB4DC\uC2DC\uD2B8\uC5D0 \uC4F0\uAE30 \uAD8C\uD55C\uC774 \uC788\uC5B4\uC57C \uD569\uB2C8\uB2E4.`:s.message.includes("404")&&(r+=`

\uC2A4\uD504\uB808\uB4DC\uC2DC\uD2B8 ID\uB098 \uC2DC\uD2B8 \uC774\uB984\uC774 \uC62C\uBC14\uB978\uC9C0 \uD655\uC778\uD574\uC8FC\uC138\uC694.`)),{content:[{type:"text",text:`\u274C Epic \uC0DD\uC131 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4: ${r}`}]}}}},{name:"update_progress",description:"\uD50C\uB7AB\uD3FC\uBCC4 \uC9C4\uD589\uB960\uC744 \uC5C5\uB370\uC774\uD2B8\uD569\uB2C8\uB2E4. \uAC00\uC7A5 \uC790\uC8FC \uC0AC\uC6A9\uB418\uB294 \uAE30\uB2A5\uC785\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_url:{type:"string",description:"Epic URL (\uC608: https://company.atlassian.net/browse/PROJ-123)"},platform:{type:"string",description:"\uD50C\uB7AB\uD3FC",enum:["iOS","Android","JS"]},progress:{type:"number",description:"\uC9C4\uD589\uB960 (0-100)",minimum:0,maximum:100},comment:{type:"string",description:"\uC9C4\uD589 \uC0C1\uD669 \uCF54\uBA58\uD2B8 (\uC120\uD0DD\uC0AC\uD56D)"},author:{type:"string",description:"\uC791\uC131\uC790 (\uC608: @Airen Kang)"}},required:["epic_url","platform","progress","author"]},handler:async(a,e)=>{try{let t=_(e.epic_url);if(!t)return{content:[{type:"text",text:"\u274C \uC62C\uBC14\uB978 Epic URL \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123"}]};if(!(await a.fetchAllData()).epics.find(p=>p.epic_id===t))return{content:[{type:"text",text:`\u274C Epic ${t}\uB97C \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.`}]};let i={updated_by:e.author};switch(e.platform){case"iOS":i.ios_progress=e.progress;break;case"Android":i.android_progress=e.progress;break;case"JS":i.js_progress=e.progress;break}e.comment&&(i.last_comment=e.comment);let n=await a.updateEpicStatus(t,i),o=await a.addStatusUpdate({epic_id:t,update_type:"progress",platform:e.platform,message:`${e.progress}% \uC644\uB8CC${e.comment?` - ${e.comment}`:""}`,author:e.author});return n&&o?{content:[{type:"text",text:`\u2705 ${t}\uC758 ${e.platform} \uC9C4\uD589\uB960\uC774 ${e.progress}%\uB85C \uC5C5\uB370\uC774\uD2B8\uB418\uC5C8\uC2B5\uB2C8\uB2E4.`}]}:{content:[{type:"text",text:`\u274C \uC5C5\uB370\uC774\uD2B8 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. (Status Update: ${n}, History: ${o})`}]}}catch(t){console.error("Progress update error:",t);let s="\uC54C \uC218 \uC5C6\uB294 \uC624\uB958";return t instanceof Error&&(s=t.message),{content:[{type:"text",text:`\u274C \uC9C4\uD589\uB960 \uC5C5\uB370\uC774\uD2B8 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4: ${s}`}]}}}},{name:"add_comment",description:"Epic\uC5D0 \uCF54\uBA58\uD2B8\uB97C \uCD94\uAC00\uD569\uB2C8\uB2E4. \uD604\uC7AC \uC0C1\uD669\uC744 \uBE60\uB974\uAC8C \uACF5\uC720\uD560 \uB54C \uC0AC\uC6A9\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_url:{type:"string",description:"Epic URL (\uC608: https://company.atlassian.net/browse/PROJ-123)"},comment:{type:"string",description:"\uCF54\uBA58\uD2B8 \uB0B4\uC6A9"},platform:{type:"string",description:"\uD50C\uB7AB\uD3FC (\uC120\uD0DD\uC0AC\uD56D)",enum:["iOS","Android","JS"]},author:{type:"string",description:"\uC791\uC131\uC790"}},required:["epic_url","comment","author"]},handler:async(a,e)=>{try{let t=_(e.epic_url);if(!t)return{content:[{type:"text",text:"\u274C \uC62C\uBC14\uB978 Epic URL \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123"}]};let s=await a.updateEpicStatus(t,{last_comment:e.comment,updated_by:e.author}),r=await a.addStatusUpdate({epic_id:t,update_type:"comment",platform:e.platform,message:e.comment,author:e.author});return s&&r?{content:[{type:"text",text:"\u{1F4AC} \uCF54\uBA58\uD2B8\uAC00 \uCD94\uAC00\uB418\uC5C8\uC2B5\uB2C8\uB2E4."}]}:{content:[{type:"text",text:`\u274C \uCF54\uBA58\uD2B8 \uCD94\uAC00 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. (Status Update: ${s}, History: ${r})`}]}}catch(t){console.error("Comment add error:",t);let s="\uC54C \uC218 \uC5C6\uB294 \uC624\uB958";return t instanceof Error&&(s=t.message),{content:[{type:"text",text:`\u274C \uCF54\uBA58\uD2B8 \uCD94\uAC00 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4: ${s}`}]}}}},{name:"report_blocker",description:"\uBE14\uB85C\uCEE4\uB97C \uB4F1\uB85D\uD569\uB2C8\uB2E4. \uC791\uC5C5\uC744 \uB9C9\uB294 \uC774\uC288\uAC00 \uBC1C\uC0DD\uD588\uC744 \uB54C \uC0AC\uC6A9\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_url:{type:"string",description:"Epic URL (\uC608: https://company.atlassian.net/browse/PROJ-123)"},platform:{type:"string",description:"\uBE14\uB85C\uCEE4\uAC00 \uBC1C\uC0DD\uD55C \uD50C\uB7AB\uD3FC",enum:["iOS","Android","JS"]},description:{type:"string",description:"\uBE14\uB85C\uCEE4 \uC124\uBA85"},author:{type:"string",description:"\uBCF4\uACE0\uC790"}},required:["epic_url","platform","description","author"]},handler:async(a,e)=>{let t=_(e.epic_url);if(!t)return{content:[{type:"text",text:"\u274C \uC62C\uBC14\uB978 Epic URL \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123"}]};let s=await a.addStatusUpdate({epic_id:t,update_type:"blocker",platform:e.platform,message:e.description,author:e.author});return await a.updateEpicStatus(t,{last_comment:`\u{1F6AB} [${e.platform}] \uBE14\uB85C\uCEE4: ${e.description}`,updated_by:e.author}),s?{content:[{type:"text",text:`\u{1F6AB} \uBE14\uB85C\uCEE4\uAC00 \uB4F1\uB85D\uB418\uC5C8\uC2B5\uB2C8\uB2E4: ${e.description}`}]}:{content:[{type:"text",text:"\u274C \uBE14\uB85C\uCEE4 \uB4F1\uB85D \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."}]}}},{name:"resolve_blocker",description:"\uBE14\uB85C\uCEE4\uB97C \uD574\uACB0 \uCC98\uB9AC\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_url:{type:"string",description:"Epic URL (\uC608: https://company.atlassian.net/browse/PROJ-123)"},platform:{type:"string",description:"\uD574\uACB0\uB41C \uD50C\uB7AB\uD3FC",enum:["iOS","Android","JS"]},resolution:{type:"string",description:"\uD574\uACB0 \uBC29\uBC95 \uC124\uBA85"},author:{type:"string",description:"\uD574\uACB0\uC790"}},required:["epic_url","platform","resolution","author"]},handler:async(a,e)=>{let t=_(e.epic_url);if(!t)return{content:[{type:"text",text:"\u274C \uC62C\uBC14\uB978 Epic URL \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123"}]};let s=await a.addStatusUpdate({epic_id:t,update_type:"resolved",platform:e.platform,message:e.resolution,author:e.author});return await a.updateEpicStatus(t,{last_comment:`\u2705 [${e.platform}] \uBE14\uB85C\uCEE4 \uD574\uACB0: ${e.resolution}`,updated_by:e.author}),s?{content:[{type:"text",text:"\u2705 \uBE14\uB85C\uCEE4\uAC00 \uD574\uACB0\uB418\uC5C8\uC2B5\uB2C8\uB2E4!"}]}:{content:[{type:"text",text:"\u274C \uBE14\uB85C\uCEE4 \uD574\uACB0 \uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."}]}}},{name:"change_epic_status",description:"Epic\uC758 \uC804\uCCB4 \uC0C1\uD0DC\uB97C \uBCC0\uACBD\uD569\uB2C8\uB2E4. (\uC608: planning \u2192 development)",inputSchema:{type:"object",properties:{epic_url:{type:"string",description:"Epic URL (\uC608: https://company.atlassian.net/browse/PROJ-123)"},new_status:{type:"string",description:"\uC0C8\uB85C\uC6B4 \uC0C1\uD0DC",enum:["backlog","kickoff","planning","development","code_review","testing","ready_to_release","released","done","on_hold"]},reason:{type:"string",description:"\uC0C1\uD0DC \uBCC0\uACBD \uC774\uC720 (\uC120\uD0DD\uC0AC\uD56D)"},author:{type:"string",description:"\uBCC0\uACBD\uC790"}},required:["epic_url","new_status","author"]},handler:async(a,e)=>{let t=_(e.epic_url);if(!t)return{content:[{type:"text",text:"\u274C \uC62C\uBC14\uB978 Epic URL \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123"}]};let s=await a.changeEpicStatus(t,e.new_status),r=e.reason?`\uC0C1\uD0DC \uBCC0\uACBD: ${e.new_status} - ${e.reason}`:`\uC0C1\uD0DC \uBCC0\uACBD: ${e.new_status}`,i=await a.addStatusUpdate({epic_id:t,update_type:"status_change",message:r,author:e.author});return await a.updateEpicStatus(t,{overall_status:e.new_status,last_comment:r,updated_by:e.author}),s&&i?{content:[{type:"text",text:`\u{1F504} Epic \uC0C1\uD0DC\uAC00 ${e.new_status}\uB85C \uBCC0\uACBD\uB418\uC5C8\uC2B5\uB2C8\uB2E4.`}]}:{content:[{type:"text",text:"\u274C \uC0C1\uD0DC \uBCC0\uACBD \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."}]}}},{name:"mark_platform_done",description:"\uD2B9\uC815 \uD50C\uB7AB\uD3FC\uC758 \uC791\uC5C5\uC744 \uC644\uB8CC \uCC98\uB9AC\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_url:{type:"string",description:"Epic URL (\uC608: https://company.atlassian.net/browse/PROJ-123)"},platform:{type:"string",description:"\uC644\uB8CC\uB41C \uD50C\uB7AB\uD3FC",enum:["iOS","Android","JS"]},author:{type:"string",description:"\uC644\uB8CC \uCC98\uB9AC\uC790"}},required:["epic_url","platform","author"]},handler:async(a,e)=>{let t=_(e.epic_url);if(!t)return{content:[{type:"text",text:"\u274C \uC62C\uBC14\uB978 Epic URL \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123"}]};let s={updated_by:e.author,last_comment:`${e.platform} \uAC1C\uBC1C \uC644\uB8CC`};switch(e.platform){case"iOS":s.ios_progress=100;break;case"Android":s.android_progress=100;break;case"JS":s.js_progress=100;break}let r=await a.updateEpicStatus(t,s),i=await a.addStatusUpdate({epic_id:t,update_type:"progress",platform:e.platform,message:"\uAC1C\uBC1C \uC644\uB8CC (100%)",author:e.author});return r&&i?{content:[{type:"text",text:`\u{1F389} ${e.platform} \uD50C\uB7AB\uD3FC \uC791\uC5C5\uC774 \uC644\uB8CC\uB418\uC5C8\uC2B5\uB2C8\uB2E4!`}]}:{content:[{type:"text",text:"\u274C \uC644\uB8CC \uCC98\uB9AC \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4."}]}}},{name:"add_to_sprint",description:"\uC2A4\uD504\uB9B0\uD2B8\uC5D0 Epic\uC744 \uCD94\uAC00\uD569\uB2C8\uB2E4.",inputSchema:{type:"object",properties:{epic_url:{type:"string",description:"Epic URL (\uC608: https://company.atlassian.net/browse/PROJ-123)"},sprint_name:{type:"string",description:"\uC2A4\uD504\uB9B0\uD2B8 \uC774\uB984"},sprint_goal:{type:"string",description:"\uC774\uBC88 \uC2A4\uD504\uB9B0\uD2B8\uC758 \uBAA9\uD45C (\uC120\uD0DD\uC0AC\uD56D)"},is_carry_over:{type:"boolean",description:"\uC774\uC804 \uC2A4\uD504\uB9B0\uD2B8\uC5D0\uC11C \uC774\uC6D4\uB41C Epic\uC778\uC9C0",default:!1}},required:["epic_url","sprint_name"]},handler:async(a,e)=>_(e.epic_url)?{content:[{type:"text",text:"\u274C Sprint \uAE30\uB2A5\uC774 \uC81C\uAC70\uB418\uC5C8\uC2B5\uB2C8\uB2E4. Sprint_View\uAC00 \uB354 \uC774\uC0C1 \uC0AC\uC6A9\uB418\uC9C0 \uC54A\uC2B5\uB2C8\uB2E4."}]}:{content:[{type:"text",text:"\u274C \uC62C\uBC14\uB978 Epic URL \uD615\uC2DD\uC774 \uC544\uB2D9\uB2C8\uB2E4. \uC608: https://company.atlassian.net/browse/PROJ-123"}]}}];var P=class{constructor(){this.server=new N({name:"team-epic-mcp",version:"2.0.0"},{capabilities:{tools:{}}}),this.sheetsClient=new w,this.tools=[...T.map(e=>({name:e.name,description:e.description,inputSchema:e.inputSchema})),...C.map(e=>({name:e.name,description:e.description,inputSchema:e.inputSchema}))],this.setupHandlers()}setupHandlers(){this.server.setRequestHandler(j,async()=>({tools:this.tools})),this.server.setRequestHandler(q,async e=>{let{name:t,arguments:s}=e.params;try{let r=T.find(n=>n.name===t);if(r){let n=await this.sheetsClient.fetchAllData();return r.handler(n,s)}let i=C.find(n=>n.name===t);if(i)return await i.handler(this.sheetsClient,s);throw new Error(`Unknown tool: ${t}`)}catch(r){return console.error(`Error executing tool ${t}:`,r),{content:[{type:"text",text:`Error: ${r instanceof Error?r.message:"Unknown error"}`}]}}})}async start(){let e=new H;await this.server.connect(e),console.error("Team Epic MCP Server started"),console.error(`Connected to spreadsheet: ${c.SPREADSHEET_ID}`);try{await this.sheetsClient.checkAndMigrateIfNeeded()}catch(t){console.error("Migration check failed:",t)}}},J=new P;J.start().catch(console.error);
